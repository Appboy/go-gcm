package mocks

import "github.com/rounds/go-gcm"
import "github.com/stretchr/testify/mock"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *Client) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendHTTP provides a mock function with given fields: m
func (_m *Client) SendHTTP(m gcm.HTTPMessage) (*gcm.HTTPResponse, error) {
	ret := _m.Called(m)

	var r0 *gcm.HTTPResponse
	if rf, ok := ret.Get(0).(func(gcm.HTTPMessage) *gcm.HTTPResponse); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcm.HTTPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(gcm.HTTPMessage) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendXMPP provides a mock function with given fields: m
func (_m *Client) SendXMPP(m gcm.XMPPMessage) (string, int, error) {
	ret := _m.Called(m)

	var r0 string
	if rf, ok := ret.Get(0).(func(gcm.XMPPMessage) string); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(gcm.XMPPMessage) int); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(gcm.XMPPMessage) error); ok {
		r2 = rf(m)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
